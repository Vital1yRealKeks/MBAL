import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import fsolve
import math
import mpmath
from scipy.special import j0, j1
from scipy.optimize import brentq

rw = 0.5
m_poro = 0.16
Swi = 0.14
# PVT
oil = 0.872
gas = 1.109
wat = 1
tem = 28
pi = 176
pb = 121.1
rs = 59.98

# аквифер
ra = 2000
re = 500
rd = ra/re
rD= ra/re
hw = 25
kw = 100
ugol = 360
#2446000
N = 2446000
G = 0
we = 0
Aquifer = 1
model = 1
Fetkovich = 1
corPbRsBo = 0
optimization = 0
tDsum = [0]
timed = [0]
we_obj1=[0]
we_obj2=[0]
we_obj3=[0]
we_res=[0]
class veh:
    def __init__(self, r_R, h, cf, cw, poro, perm, mu_w, rw=0.5, theta=360):
        self.cf = cf
        self.cw = cw
        self.ct = cf + cw
        self.poro = poro
        self.perm = perm
        self.mu_w = mu_w
        self.r_R = r_R  # ft
        self.rw = rw
        self.h = h
        self.rd = r_R / rw
        self.theta = theta

        # Все величины в нефтяных единицах (футах и psi)
        self.B_star = 1.119 * poro * self.ct * h * (r_R ** 2) * (theta / 360)
        #print('B_star',self.B_star)
        self.t_DR_factor = (0.0002637 * perm) / (poro * mu_w * self.ct * (r_R ** 2))

    def qd(self, td):
        def csch(x):
            return 0 if x > 100 else float(mpmath.csch(x))

        def beta(b, rd):
            return b[0] + b[1] * csch(rd) + b[2] * rd ** b[3] + b[4] * rd ** b[5]

        rd = self.rd

        if td < 0.01:
            return 2 * td ** 0.5 / math.sqrt(math.pi)
        else:
            b = [1.129552, 1.160436, 0.2642821, 0.01131791, 0.5900113,
                 0.04589742, 1.0, 0.5002034, 1.50, 1.979139]
            qd_inf = (b[0] * td ** b[7] + b[1] * td + b[2] * td ** b[8] + b[3] * td ** b[9]) / \
                     (b[4] * td ** b[7] + b[5] * td + b[6])
            if rd > 100:
                return qd_inf

            b1 = [-0.00222107, -0.627638, 6.277915, -2.734405, 1.2708, -1.100417]
            b2 = [-0.00796608, -1.85408, 18.71169, -2.758326, 4.829162, -1.009021]
            alpha1 = beta(b1, rd)
            alpha2 = beta(b2, rd)
            J0a1 = j0(alpha1)
            J0a2 = j0(alpha2)
            J1a1 = j1(alpha1 * rd)
            J1a2 = j1(alpha2 * rd)
            term1 = (2 * math.exp(-alpha1 ** 2 * td) * J1a1 ** 2) / (alpha1 ** 2 * (J0a1 ** 2 - J1a1 ** 2))
            term2 = (2 * math.exp(-alpha2 ** 2 * td) * J1a2 ** 2) / (alpha2 ** 2 * (J0a2 ** 2 - J1a2 ** 2))
            qd_fin = (rd ** 2 - 1) / 2 - term1 - term2
            return min(qd_inf, qd_fin)

    def calculate_We_at_step(self, datetime, pressure, i):
        """
        Вычислить We на шаге i, используя суперпозицию по всей истории (до i включительно)
        datetime — массив дат (np.datetime64 или pd.Timestamp)
        pressure — массив давлений (в psi)
        i — номер текущего шага (от 1 до N-1)
        """
        if i == 0:
            return 0.0

        time_hours = np.array([(datetime[i] - datetime[j]) / np.timedelta64(1, 'h') for j in range(i)])
        #print('time_hours',time_hours)
        delta_p = np.array([(pressure[j] - pressure[j + 1]) / 2 for j in range(i)])
        print('delta_p',delta_p)
        WeD_sum = 0.0
        for j in range(i):
            t_D = self.t_DR_factor * time_hours[j]
            qd_val = self.qd(t_D)
            WeD_sum += qd_val * delta_p[j]

        We = self.B_star * WeD_sum   # перевод в bbl
        return We*0.158


# Считывание данных
def data_read():
    df = pd.read_excel('D:/data.xlsx')
    df['Дата'] = pd.to_datetime(df.iloc[:, 0], format='%d/%m/%y')
    data = df.values
    P_calc = []

    T = df['Дата'].values
    T_prev = T[0]
    T_index = pd.to_datetime(T)
    Np = data[:, 2]
    Wp = data[:, 3]
    Gp = data[:, 4]
    Winj = data[:, 5]
    Ginj = data[:, 6]



    return df, data, P_calc, T, T_prev, Np, Wp, Gp, Winj, Ginj, T_index


# Пример функции для расчета коэффициента Z
def Z_int(Pit, P_list, Z_list):
    Z_int = np.interp(Pit, P_list, Z_list)
    return Z_int


def Z_Dranchuk_Abu_Kassem(Tr, Pr):
    # Check input in range of validity
    if Tr < 1 or Tr > 3 or Pr < 0.2 or Pr > 30:
        messagebox.showerror('Ошибка', 'Не выполняется условия: Tr < 1 or Tr > 3 or Pr < 0.2 or Pr > 30')

    C1 = 0.3265 - 1.07 / Tr - 0.5339 / Tr ** 3 + 0.01569 / Tr ** 4 - 0.05165 / Tr ** 5
    C2 = 0.5475 - 0.7361 / Tr + 0.1844 / Tr ** 2
    C3 = 0.1056 * (-0.7361 / Tr + 0.1844 / Tr ** 2)

    # Eq 2
    def f(rho):
        C4 = 0.6134 * (1 + 0.721 * rho ** 2) * rho ** 2 / Tr ** 3
        Z = 0.27 * Pr / Tr / rho
        return 1 + C1 * rho + C2 * rho ** 2 - C3 * rho ** 5 + C4 * np.exp(-0.721 * rho ** 2) - Z

    rho0 = 0.27 * Pr / Tr
    rho = fsolve(f, rho0, full_output=True)
    if rho[2] == 1:
        Z = 0.27 * Pr / Tr / rho[0]
    else:
        messagebox.showerror('Ошибка', "Проблема сходимости при расчёте z-фактора")
    return Z[0]
    
def PVT_calc(pit):
        #print('pit=', pit)
        if optimization == 0:
            # STANDING
            if corPbRsBo == 0:
                # если известно Rs
                if rs > 0:
                    pbii = (18.2 * (((rs * 5.64334086 / gas) ** (0.83)) * (10 ** (0.00091 * (((9 / 5) * tem) + 32) - 0.0125 * ((141.5 / oil) - 131.5))) - 1.4)) / 14.69594
                    #print("PBII=",pbii)
                    if pit >= pbii:
                        rsit = rs
                        boit = (0.972 + 1.47 * (10 ** (-4)) * (rsit * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (
                                    ((9 / 5) * tem) + 32)) ** 1.175) * np.exp(-((
                                                                                            -1433 + 5 * rsit * 5.64334086 + 17.2 * (
                                                                                                ((
                                                                                                             9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                        (
                                                                                                                    141.5 / oil) - 131.5)) / (
                                                                                            (
                                                                                                        10 ** 5) * pit * 14.69594)) * (
                                                                                          pit * 14.69594 - pbii * 14.69594))
                        #print('rsit=',rsit,'boit=',boit)
                    else:

                        rsit = (gas * (((pit * 14.69594 / 18.2) + 1.4) * 10 ** (0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086
                        boit = (0.972 + 1.47 * (10 ** (-4)) * (
                                    rsit * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (((9 / 5) * tem) + 32)) ** 1.175)
                        #print('rsit=', rsit, 'boit=', boit)1
                # если известно Pb
                else:
                    if pit >= pb:
                        rsit = (gas * (((pb * 14.69594 / 18.2) + 1.4) * 10 ** (
                                    0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (
                                        ((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086
                        boit = (0.972 + 1.47 * (10 ** (-4)) * (rsit * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (
                                    ((9 / 5) * tem) + 32)) ** 1.175) * np.exp(-((
                                                                                            -1433 + 5 * rsit * 5.64334086 + 17.2 * (
                                                                                                ((
                                                                                                             9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                        (
                                                                                                                    141.5 / oil) - 131.5)) / (
                                                                                            (
                                                                                                        10 ** 5) * pit * 14.69594)) * (
                                                                                          pit * 14.69594 - pb * 14.69594))
                    else:
                        rsit = (gas * (((pit * 14.69594 / 18.2) + 1.4) * 10 ** (
                                    0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (
                                        ((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086
                        boit = (0.972 + 1.47 * (10 ** (-4)) * (
                                    rsit * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (((9 / 5) * tem) + 32)) ** 1.175)
            # GLASO
            elif corPbRsBo == 1:
                # если известно Rs
                if rs > 0:
                    if pit >= pbii:
                        rsit = rs
                        # boit = (1+10**(-6.58511+2.91329*np.log10(rsit*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))-0.27683*np.log10(rsit*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))**2))*np.exp(-(10**(-5))*(-1433+5*rsit*5.64334086+17.2*(((9/5)*tem)+32)-1180*gas+12.61*((141.5/oil)-131.5))*np.log(p/pbii))
                        boit = (1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) ** 2)) * np.exp(-((
                                                                                             -1433 + 5 * rsit * 5.64334086 + 17.2 * (
                                                                                                 ((
                                                                                                              9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                         (
                                                                                                                     141.5 / oil) - 131.5)) / (
                                                                                             (
                                                                                                         10 ** 5) * pit * 14.69594)) * (
                                                                                           pit * 14.69594 - pbii * 14.69594))
                    else:
                        rsit = (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (
                                    10 ** (2.8869 - (
                                        14.1811 - 3.3093 * np.log10(pit * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086
                        boit = 1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)

                # если известно Pb
                else:
                    if pit >= pb:
                        rsit = (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (
                                    10 ** (2.8869 - (
                                        14.1811 - 3.3093 * np.log10(pb * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086
                        # boit = (1+10**(-6.58511+2.91329*np.log10(rsit*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))-0.27683*np.log10(rsit*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))**2))*np.exp(-(10**(-5))*(-1433+5*rsit*5.64334086+17.2*(((9/5)*tem)+32)-1180*gas+12.61*((141.5/oil)-131.5))*np.log(p/pb))
                        boit = (1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) ** 2)) * np.exp(-((
                                                                                             -1433 + 5 * rsit * 5.64334086 + 17.2 * (
                                                                                                 ((
                                                                                                              9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                         (
                                                                                                                     141.5 / oil) - 131.5)) / (
                                                                                             (
                                                                                                         10 ** 5) * pit * 14.69594)) * (
                                                                                           pit * 14.69594 - pb * 14.69594))
                    else:
                        rsit = (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (
                                    10 ** (2.8869 - (
                                        14.1811 - 3.3093 * np.log10(pit * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086
                        boit = 1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)
            # AL-MARHOUN
            elif corPbRsBo == 2:
                # если известно Rs
                if rs > 0:
                    if pit >= pbii:
                        rsit = rs
                        boit = (0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (
                                    ((rsit * 5.64334086) ** 0.74239) * (gas ** 0.323294) * (
                                        oil ** (-1.202040))) + 0.00000318099 * ((((rsit * 5.64334086) ** 0.74239) * (
                                    gas ** 0.323294) * (oil ** (-1.202040))) ** 2)) * np.exp(-((
                                                                                                           -1433 + 5 * rsit * 5.64334086 + 17.2 * (
                                                                                                               ((
                                                                                                                            9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                                       (
                                                                                                                                   141.5 / oil) - 131.5)) / (
                                                                                                           (
                                                                                                                       10 ** 5) * pit * 14.69594)) * (
                                                                                                         pit * 14.69594 - pbii * 14.69594))
                    else:
                        rsit = ((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                                    ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                             pit * 14.69594)) ** 1.39844) / 5.64334086
                        boit = 0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (
                                    ((rsit * 5.64334086) ** 0.74239) * (gas ** 0.323294) * (
                                        oil ** (-1.202040))) + 0.00000318099 * ((((rsit * 5.64334086) ** 0.74239) * (
                                    gas ** 0.323294) * (oil ** (-1.202040))) ** 2)

                # если известно Pb
                else:
                    if pit >= pb:
                        rsit = ((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                                    ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                             pb * 14.69594)) ** 1.39844) / 5.64334086
                        boit = (0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (
                                    ((rsit * 5.64334086) ** 0.74239) * (gas ** 0.323294) * (
                                        oil ** (-1.202040))) + 0.00000318099 * ((((rsit * 5.64334086) ** 0.74239) * (
                                    gas ** 0.323294) * (oil ** (-1.202040))) ** 2)) * np.exp(-((
                                                                                                           -1433 + 5 * rsit * 5.64334086 + 17.2 * (
                                                                                                               ((
                                                                                                                            9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                                       (
                                                                                                                                   141.5 / oil) - 131.5)) / (
                                                                                                           (
                                                                                                                       10 ** 5) * pit * 14.69594)) * (
                                                                                                         pit * 14.69594 - pb * 14.69594))
                    else:
                        rsit = ((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                                    ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                             pit * 14.69594)) ** 1.39844) / 5.64334086
                        boit = 1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                        ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                            rsit * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)
            # PETROSKY-FARSHAD
            elif corPbRsBo == 3:
                # если известно Rs
                if rs > 0:
                    if pit >= pbii:
                        rsit = rs
                        boit = (1.0113 + 7.2046 * (10 ** (-5)) * ((((rsit * 5.64334086) ** 0.3738) * (
                                    (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * ((((
                                                                                                  9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)) * np.exp(
                            -(1.705 * (10 ** (-7)) * ((rsit * 5.64334086) ** 0.69357) * (gas ** 1.885) * (
                                        ((141.5 / oil) - 131.5) ** 0.3272) * ((((9 / 5) * tem) + 32) ** 0.6729) * (
                                          (pit * 14.69594) ** (-0.5906))) * (pit * 14.69594 - pbii * 14.69594))
                    else:
                        rsit = (((((pit * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                                    7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (
                                        10 ** (-5)) * ((((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086
                        boit = 1.0113 + 7.2046 * (10 ** (-5)) * ((((rsit * 5.64334086) ** 0.3738) * (
                                    (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * ((((
                                                                                                  9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)
                # если известно Pb
                else:
                    if pit >= pb:
                        rsit = (((((pb * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                                    7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (
                                        10 ** (-5)) * ((((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086
                        boit = (1.0113 + 7.2046 * (10 ** (-5)) * ((((rsit * 5.64334086) ** 0.3738) * (
                                    (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * ((((
                                                                                                  9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)) * np.exp(
                            -(1.705 * (10 ** (-7)) * ((rsit * 5.64334086) ** 0.69357) * (gas ** 1.885) * (
                                        ((141.5 / oil) - 131.5) ** 0.3272) * ((((9 / 5) * tem) + 32) ** 0.6729) * (
                                          (pit * 14.69594) ** (-0.5906))) * (pit * 14.69594 - pb * 14.69594))
                    else:
                        rsit = (((((pit * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                                    7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (
                                        10 ** (-5)) * ((((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086
                        boit = 1.0113 + 7.2046 * (10 ** (-5)) * ((((rsit * 5.64334086) ** 0.3738) * (
                                    (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * ((((
                                                                                                  9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)

        elif optimization == 1:
            # STANDING
            if corPbRsBo == 0:
                if pit >= pbii:
                    rsit = rs_opt
                    boit = a_bo_posle * ((0.972 + 1.47 * (10 ** (-4)) * ((((((pbii * 14.69594) / 112.727) + 12.34) * (
                                gas ** 0.8439) * (10 ** (
                                7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (
                                    (((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086 * 5.64334086 * (
                                                                                     (gas / oil) ** 0.5) + 1.25 * (((
                                                                                                                                9 / 5) * tem) + 32)) ** 1.175) * np.exp(
                        -((-1433 + 5 * (gas * (((pbii * 14.69594 / 18.2) + 1.4) * 10 ** (
                                    0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (
                                        ((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086 * 5.64334086 + 17.2 * (
                                       ((9 / 5) * tem) + 32) - 1180 * gas + 12.61 * ((141.5 / oil) - 131.5)) / (
                                      (10 ** 5) * pit * 14.69594)) * (pit * 14.69594 - pbii * 14.69594))) + b_bo_posle
                else:
                    rsit = a_rs * ((gas * (((pit * 14.69594 / 18.2) + 1.4) * 10 ** (
                                0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (
                                    ((9 / 5) * tem) + 32)))) ** 1.2048 / 5.64334086) + b_rs
                    boit = a_bo_do * ((0.972 + 1.47 * (10 ** (-4)) * ((((((pit * 14.69594) / 112.727) + 12.34) * (
                                gas ** 0.8439) * (10 ** (
                                7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (
                                    (((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086 * 5.64334086 * (
                                                                                  (gas / oil) ** 0.5) + 1.25 * (((
                                                                                                                             9 / 5) * tem) + 32)) ** 1.175)) + b_bo_do
            # GLASO
            elif corPbRsBo == 1:
                if pit >= pbii:
                    rsit = rs_opt
                    boit = a_bo_posle * ((1 + 10 ** (-6.58511 + 2.91329 * np.log10((gas * (
                                ((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (
                                    2.8869 - (14.1811 - 3.3093 * np.log10(
                                pbii * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086 * 5.64334086 * ((
                                                                                                                gas / oil) ** 0.526) + 0.968 * (
                                                                                               ((
                                                                                                            9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                        (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (
                                    2.8869 - (14.1811 - 3.3093 * np.log10(
                                pbii * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086 * 5.64334086 * (
                                    (gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)) * np.exp(-((
                                                                                                                          -1433 + 5 * (
                                                                                                                              (
                                                                                                                                          gas * (
                                                                                                                                              (
                                                                                                                                                          (
                                                                                                                                                                      (
                                                                                                                                                                                  (
                                                                                                                                                                                              141.5 / oil) - 131.5) ** 0.989) / (
                                                                                                                                                                      (
                                                                                                                                                                                  (
                                                                                                                                                                                              (
                                                                                                                                                                                                          9 / 5) * tem) + 32) ** 0.172)) * (
                                                                                                                                                          10 ** (
                                                                                                                                                              2.8869 - (
                                                                                                                                                                  14.1811 - 3.3093 * np.log10(
                                                                                                                                                              pbii * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086) * 5.64334086 + 17.2 * (
                                                                                                                                      (
                                                                                                                                                  (
                                                                                                                                                              9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                                                      (
                                                                                                                                                  141.5 / oil) - 131.5)) / (
                                                                                                                          (
                                                                                                                                      10 ** 5) * pit * 14.69594)) * (
                                                                                                                        pit * 14.69594 - pbii * 14.69594))) + b_bo_posle
                else:
                    rsit = a_rs * ((gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (
                                10 ** (2.8869 - (14.1811 - 3.3093 * np.log10(
                            pit * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086) + b_rs
                    boit = a_bo_do * (1 + 10 ** (-6.58511 + 2.91329 * np.log10((gas * (
                                ((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (
                                    2.8869 - (14.1811 - 3.3093 * np.log10(
                                pit * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086 * 5.64334086 * ((
                                                                                                               gas / oil) ** 0.526) + 0.968 * (
                                                                                           ((
                                                                                                        9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                        (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (
                                    2.8869 - (14.1811 - 3.3093 * np.log10(
                                pit * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086 * 5.64334086 * (
                                    (gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)) + b_bo_do

            # AL-MARHOUN
            elif corPbRsBo == 2:
                if pit >= pbii:
                    rsit = rs_opt
                    boit = a_bo_posle * (0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (((((
                                                                                                                                185.843208 * (
                                                                                                                                    gas ** 1.87784) * (
                                                                                                                                            oil ** (
                                                                                                                                        -3.1437)) * (
                                                                                                                                            (
                                                                                                                                                        (
                                                                                                                                                                    (
                                                                                                                                                                                (
                                                                                                                                                                                            9 / 5) * tem) + 32) + 460) ** (
                                                                                                                                                -1.32657)) * (
                                                                                                                                            pbii * 14.69594)) ** 1.39844) / 5.64334086 * 5.64334086) ** 0.74239) * (
                                                                                                                             gas ** 0.323294) * (
                                                                                                                             oil ** (
                                                                                                                         -1.202040))) + 0.00000318099 * (
                                                     (((((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                                                                 ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                                                      pbii * 14.69594)) ** 1.39844) / 5.64334086 * 5.64334086) ** 0.74239) * (
                                                                  gas ** 0.323294) * (
                                                                  oil ** (-1.202040))) ** 2) * np.exp(-((-1433 + 5 * (((
                                                                                                                                   185.843208 * (
                                                                                                                                       gas ** 1.87784) * (
                                                                                                                                               oil ** (
                                                                                                                                           -3.1437)) * (
                                                                                                                                               (
                                                                                                                                                           (
                                                                                                                                                                       (
                                                                                                                                                                                   (
                                                                                                                                                                                               9 / 5) * tem) + 32) + 460) ** (
                                                                                                                                                   -1.32657)) * (
                                                                                                                                               pbii * 14.69594)) ** 1.39844) / 5.64334086) * 5.64334086 + 17.2 * (
                                                                                                                     ((
                                                                                                                                  9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                                     (
                                                                                                                                 141.5 / oil) - 131.5)) / (
                                                                                                                    (
                                                                                                                                10 ** 5) * pit * 14.69594)) * (
                                                                                                                  pit * 14.69594 - pbii * 14.69594))) + b_bo_posle
                else:
                    rsit = a_rs * (((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                                ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                                 pit * 14.69594)) ** 1.39844) / 5.64334086) + b_rs
                    boit = a_bo_do * (0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (((((
                                                                                                                             185.843208 * (
                                                                                                                                 gas ** 1.87784) * (
                                                                                                                                         oil ** (
                                                                                                                                     -3.1437)) * (
                                                                                                                                         (
                                                                                                                                                     (
                                                                                                                                                                 (
                                                                                                                                                                             (
                                                                                                                                                                                         9 / 5) * tem) + 32) + 460) ** (
                                                                                                                                             -1.32657)) * (
                                                                                                                                         pit * 14.69594)) ** 1.39844) / 5.64334086 * 5.64334086) ** 0.74239) * (
                                                                                                                          gas ** 0.323294) * (
                                                                                                                          oil ** (
                                                                                                                      -1.202040))) + 0.00000318099 * (
                                                  (((((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                                                              ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                                                   pit * 14.69594)) ** 1.39844) / 5.64334086 * 5.64334086) ** 0.74239) * (
                                                               gas ** 0.323294) * (oil ** (-1.202040))) ** 2)) + b_bo_do

            # PETROSKY-FARSHAD
            elif corPbRsBo == 3:
                if pit >= pbii:
                    rsit = rs_opt
                    boit = a_bo_posle * ((1.0113 + 7.2046 * (10 ** (-5)) * ((((((((((
                                                                                                pbii * 14.69594) / 112.727) + 12.34) * (
                                                                                              gas ** 0.8439) * (10 ** (
                                7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (((
                                                                                                                                   (
                                                                                                                                               9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086) * 5.64334086) ** 0.3738) * (
                                                                                         (gas ** 0.2914) / (
                                                                                             oil ** 0.6265)) + 0.24626 * (
                                                                                         (((
                                                                                                       9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)) * np.exp(
                        -(1.705 * (10 ** (-7)) * ((((((((pbii * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (
                                    10 ** (7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (
                                        10 ** (-5)) * ((((
                                                                     9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086) * 5.64334086) ** 0.69357) * (
                                      gas ** 1.885) * (((141.5 / oil) - 131.5) ** 0.3272) * (
                                      (((9 / 5) * tem) + 32) ** 0.6729) * ((pit * 14.69594) ** (-0.5906))) * (
                                    pit * 14.69594 - pbii * 14.69594))) + b_bo_posle
                else:
                    rsit = a_rs * ((((((pit * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                                7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (
                                    (((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086) + b_rs
                    boit = a_bo_do * (1.0113 + 7.2046 * (10 ** (-5)) * ((((((((((pit * 14.69594) / 112.727) + 12.34) * (
                                gas ** 0.8439) * (10 ** (
                                7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (((
                                                                                                                                   (
                                                                                                                                               9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086) * 5.64334086) ** 0.3738) * (
                                                                                     (gas ** 0.2914) / (
                                                                                         oil ** 0.6265)) + 0.24626 * (((
                                                                                                                                   (
                                                                                                                                               9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)) + b_bo_do


        # ГАЗ
        # Расчёт z-фактора и объёмного коэффициента газа
        # Z_Dranchuk_Abu_Kassem
        Tpc = 168 + 325 * gas - 12.5 * gas ** 2
        Ppc = 667 + 15 * gas - 37.5 * gas ** 2
        Tr = (((9 / 5) * tem) + 32 + 459.67) / Tpc
        Pr = pit * 14.69594 / Ppc
        Z = Z_Dranchuk_Abu_Kassem(Tr, Pr)
        # Объёмный коэффициент газа
        #print('Z=',Z)
        #print('tem=', tem)
        bgit = 0.350958 * (Z * (tem + 273.15) / (pit * 100))
        #print('bgit=',bgit)
        # ВОДА
        # Расчёт объёмного коэф. Hewlett-Packard
        A_1 = 0.9947 + 5.8 * (10 ** (-6)) * (((9 / 5) * tem) + 32) + 1.02 * (10 ** (-6)) * (((9 / 5) * tem) + 32) ** 2
        A_2 = -4.228 * (10 ** (-6)) + 1.8376 * (10 ** (-8)) * (((9 / 5) * tem) + 32) - 6.77 * (10 ** (-11)) * (
                    ((9 / 5) * tem) + 32) ** 2
        A_3 = 1.3 * (10 ** (-10)) - 1.3855 * (10 ** (-12)) * (((9 / 5) * tem) + 32) + 4.285 * (10 ** (-15)) * (
                    ((9 / 5) * tem) + 32) ** 2
        bwit = A_1 + A_2 * pit * 14.69594 + A_3 * (pit * 14.69594) ** 2
        # Расчёт сжимаемости воды
        # cwit = 1.87143682589*10**(-9)*p+4.281111590909080*10**(-5)
        cwit = ((10 ** (-6)) * (3.51 + (-0.01 + 2 * (10 ** (-7)) * pit * 14.69594) * (((9 / 5) * tem) + 32) + (
                    3.9267 * (10 ** (-5)) - 8 * (10 ** (-10)) * pit * 14.69594) * (
                                            ((9 / 5) * tem) + 32) ** 2)) * 14.69594

        btit = boit + (rsii - rsit) * bgit
        cfactor = (Swi * cwit + cf) / (1 - Swi)
        #rsit - газосодержание на i, boit - объемный коэффициент нефти, bgit- объемный коэф газа, bwit - воды, cwit- сжимаемость воды, btit- обхемный нефть+газ, cfactor - сжим системы
        #print('boit=',boit,'bgit=',bgit,'bwit=',bwit)
        return [float(rsit), float(boit), float(bgit), float(bwit), float(cwit), float(btit), float(cfactor)]
    #return [rsit, boit, bgit, bwit, cwit, btit, cfactor]

    # Расчёт сжимаемости пористой среды по корреляциям PETEX
if m_poro > 0.3:
        cf = (3.2e-06) * 14.69594
else:
        cf = (3.2e-06 + ((0.3 - m_poro) ** 2.415) * 7.8e-05) * 14.69594

jw = 0
Wei = 0
# Аквифер
if Aquifer ==1 :
        # исходные свойства
        # сжимаемость воды
        acvcw = ((10 ** (-6)) * (3.51 + (-0.01 + 2 * (10 ** (-7)) * pi * 14.69594) * (((9 / 5) * tem) + 32) + (
                3.9267 * (10 ** (-5)) - 8 * (10 ** (-10)) * pi * 14.69594) * (
                                         ((9 / 5) * tem) + 32) ** 2)) * 14.69594
        # Расчёт вязкости McCain
        aCwat = 25000 * (wat - 1) * 62.428
        acww = aCwat / 1.0476 / 10000
        acofA = 109.574 - 8.40564 * acww + 0.313314 * (acww ** 2) + 0.00872213 * (acww ** 3)
        acofB = -1.12166 + 2.63951 * (10 ** (-2)) * acww - 6.79461 * (10 ** (-4)) * (acww ** 2) - 5.47119 * (
                10 ** (-5)) * (acww ** 3) + 1.55586 * (10 ** (-6)) * (acww ** 4)
        auwi = acofA * (((9 / 5) * tem) + 32) ** acofB
        auwwi = auwi * (0.9994 + 4.0295 * (10 ** (-5)) * pi * 14.69594 + 3.1062 * (10 ** (-9)) * ((pi * 14.69594) ** 2))
        print('auwwi=',auwwi)

        ct = (cf + acvcw) / 14.69594
        print('cf',cf/14.69594,'acvcw',acvcw/14.69594)
        print('ct=',ct)

        # Картер-Трейси (радиальная)
        if Fetkovich == 0:
            #Bcoef = 6.3 * (ugol / 360) * m_poro * ct * ((re * 3.28084) ** 2) * hw
            Bcoef = 1.119 * m_poro * ct * hw * 3.28 * ((re * 3.28) ** 2) * (ugol / 360)
            print('Bcoef=',Bcoef)
            c = 0
        # Фетковича (радиальная, p≠const)
        elif Fetkovich == 1:
            Wi = np.pi * (((re * rD * 3.28084) ** 2) - (((re * 3.28084)) ** 2)) * hw * 3.28084 * (m_poro) * (ugol / 360) / 5.615
            print('Wi=', Wi)
            Wei = (ct * Wi * pi * 14.69594)
            print('Wei=', Wei)
            jw = (0.00708 * kw * hw * 3.28084 * (ugol / 360)) / (auwwi * (np.log(rD) - 0.75))
            c=0

        # Фетковича (радиальная, p=const)
        elif Fetkovich == 2:
            Wi = np.pi * (((re * rD * 3.28084) ** 2) - (((re * 3.28084)) ** 2)) * hw * 3.28084 * (m_poro) * (ugol / 360)
            Wei = (ct * Wi * pi * 14.69594) / 5.615
            jw = (0.00708 * kw * hw * 3.28084 * (ugol / 360)) / (auwwi * (np.log(rD)))
            c = 0

        # Фетковича (линейная, p≠const)
        elif Fetkovich == 3:
            Wi = (Len * 3.28084) * (shir * 3.28084) * (hw * 3.28084) * (m_poro)
            Wei = (ct * Wi * pi * 14.69594) / 5.615
            jw = 0.003381 * kw * shir * 3.28084 * hw * 3.28084 / (auwwi * Len * 3.28084)
            c = 0

        # Фетковича (линейная, p=const)
        elif Fetkovich == 4:
            Wi = (Len * 3.28084) * (shir * 3.28084) * (hw * 3.28084) * (m_poro)
            Wei = (ct * Wi * pi * 14.69594) / 5.615
            jw = 0.001127 * kw * shir * 3.28084 * hw * 3.28084 / (auwwi * Len * 3.28084)
            c = 0

        #small pot
        elif Fetkovich == 5:
            Volume= np.pi * (ra ** 2) * hw * (m_poro)
            print('Объем=',Volume)
            Wi = Volume
            #Wi = (np.pi * (((re * rD * 3.28084) ** 2) - (((re * 3.28084)) ** 2)) * hw * 3.28084 * (m_poro)  / 5.615 * 0.158)
            c = 0
            print('Wi=',Wi)
            #Wi= 46827784.57753207
            #Wi= 832082311.4014006

        #Schilthuis-steady-state
        elif Fetkovich == 6:
            c=(0.00708 * kw * hw * 6.289 ) / (100*1.678* auwwi * (np.log(rD)))
        #Hurst
        elif Fetkovich == 7:
            Bcoef = 1.119 * m_poro * ct * hw * 3.28 * ((ra * 3.28) ** 2) * (ugol / 360)
            print('Bcoef=',Bcoef)
            c = 0
        elif Fetkovich == 8:
            #B_star = 1.119 * m_poro * ct * hw * 3.28 * ((re * 3.28) ** 2) * (ugol / 360)
           # print('B_star',B_star)
            c=0

else:
        c=0
if optimization == 0:
        # STANDING
        if corPbRsBo == 0:
            # если известно Rs
            if rs > 0:
                pbii = (18.2 * (((rs * 5.64334086 / gas) ** (0.83)) * (10 ** (
                        0.00091 * (((9 / 5) * tem) + 32) - 0.0125 * ((141.5 / oil) - 131.5))) - 1.4)) / 14.69594
                if pi >= pbii:
                    rsii = rs
                    boii = (0.972 + 1.47 * (10 ** (-4)) * (rsii * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (
                            ((9 / 5) * tem) + 32)) ** 1.175) * np.exp(-((-1433 + 5 * rsii * 5.64334086 + 17.2 * (
                            ((9 / 5) * tem) + 32) - 1180 * gas + 12.61 * ((141.5 / oil) - 131.5)) / (
                                                                                (10 ** 5) * pi * 14.69594)) * (
                                                                              pi * 14.69594 - pbii * 14.69594))
                else:
                    rsii = (gas * (((pi * 14.69594 / 18.2) + 1.4) * 10 ** (0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086
                    boii = (0.972 + 1.47 * (10 ** (-4)) * (rsii * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (((9 / 5) * tem) + 32)) ** 1.175)
            # если известно Pb
            else:
                pbii = pb
                if pi >= pb:
                    rsii = (gas * (((pb * 14.69594 / 18.2) + 1.4) * 10 ** (0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086
                    boii = (0.972 + 1.47 * (10 ** (-4)) * (rsii * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (((9 / 5) * tem) + 32)) ** 1.175) * np.exp(-((-1433 + 5 * rsii * 5.64334086 + 17.2 * (((9 / 5) * tem) + 32) - 1180 * gas + 12.61 * ((141.5 / oil) - 131.5)) / ((10 ** 5) * pi * 14.69594)) * (pi * 14.69594 - pb * 14.69594))
                else:
                    rsii = (gas * (((pi * 14.69594 / 18.2) + 1.4) * 10 ** (
                            0.0125 * ((141.5 / oil) - 131.5) - 0.00091 * (
                            ((9 / 5) * tem) + 32))) ** 1.2048) / 5.64334086
                    boii = (0.972 + 1.47 * (10 ** (-4)) * (
                            rsii * 5.64334086 * ((gas / oil) ** 0.5) + 1.25 * (((9 / 5) * tem) + 32)) ** 1.175)
        # GLASO
        elif corPbRsBo == 1:
            # если известно Rs
            if rs > 0:
                pbii = 10 ** (1.7669 + 1.7447 * np.log10(
                    ((rs * 5.64334086 / gas) ** 0.816) * ((((9 / 5) * tem) + 32) ** 0.172) * (
                            ((141.5 / oil) - 131.5) ** (-0.989))) - 0.30218 * np.log10(
                    ((rs * 5.64334086 / gas) ** 0.816) * ((((9 / 5) * tem) + 32) ** 0.172) * (
                            ((141.5 / oil) - 131.5) ** (-0.989))) ** 2) / 14.69594
                if pi >= pbii:
                    rsii = rs
                    # boii = (1+10**(-6.58511+2.91329*np.log10(rsii*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))-0.27683*np.log10(rsii*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))**2))*np.exp(-(10**(-5))*(-1433+5*rsii*5.64334086+17.2*(((9/5)*tem)+32)-1180*gas+12.61*((141.5/oil)-131.5))*np.log(pi/pbii))
                    boii = (1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                        rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                        rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)) * np.exp(-((-1433 + 5 * rsii * 5.64334086 + 17.2 * (((9 / 5) * tem) + 32) - 1180 * gas + 12.61 * ((141.5 / oil) - 131.5)) / ((10 ** 5) * pi * 14.69594)) * (pi * 14.69594 - pbii * 14.69594))
                else:
                    rsii = (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (2.8869 - (14.1811 - 3.3093 * np.log10(pi * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086
                    boii = 1 + 10 ** (-6.58511 + 2.91329 * np.log10(rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) - 0.27683 * np.log10(rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)
            # если известно Pb
            else:
                pbii = pb
                if pi >= pb:
                    rsii = (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (2.8869 - (14.1811 - 3.3093 * np.log10(pb * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086
                    # boii = (1+10**(-6.58511+2.91329*np.log10(rsii*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))-0.27683*np.log10(rsii*5.64334086*((gas/oil)**0.526)+0.968*(((9/5)*tem)+32))**2))*np.exp(-(10**(-5))*(-1433+5*rsii*5.64334086+17.2*(((9/5)*tem)+32)-1180*gas+12.61*((141.5/oil)-131.5))*np.log(pi/pb))
                    boii = (1 + 10 ** (-6.58511 + 2.91329 * np.log10(rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) - 0.27683 * np.log10(rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)) * np.exp(-((
                                                                                                                               -1433 + 5 * rsii * 5.64334086 + 17.2 * (
                                                                                                                               (
                                                                                                                                       (
                                                                                                                                               9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                                                       (
                                                                                                                                               141.5 / oil) - 131.5)) / (
                                                                                                                               (
                                                                                                                                       10 ** 5) * pi * 14.69594)) * (
                                                                                                                             pi * 14.69594 - pb * 14.69594))
                else:
                    rsii = (gas * (((((141.5 / oil) - 131.5) ** 0.989) / ((((9 / 5) * tem) + 32) ** 0.172)) * (10 ** (
                            2.8869 - (14.1811 - 3.3093 * np.log10(pi * 14.69594)) ** 0.5))) ** 1.2255) / 5.64334086
                    boii = 1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                        rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                        rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)
        # AL-MARHOUN
        elif corPbRsBo == 2:
            # если известно Rs
            if rs > 0:
                pbii = (5.38088 * 10 ** (-3)) * ((rs * 5.64334086) ** (0.715082)) * (gas ** (-1.87784)) * (
                        oil ** 3.1437) * (((((9 / 5) * tem) + 32) + 460) ** 1.32657) / 14.69594
                if pi >= pbii:
                    rsii = rs
                    boii = (0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (
                            ((rsii * 5.64334086) ** 0.74239) * (gas ** 0.323294) * (
                            oil ** (-1.202040))) + 0.00000318099 * ((((rsii * 5.64334086) ** 0.74239) * (
                            gas ** 0.323294) * (oil ** (-1.202040))) ** 2)) * np.exp(-((
                                                                                               -1433 + 5 * rsii * 5.64334086 + 17.2 * (
                                                                                               ((
                                                                                                        9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                       (
                                                                                                               141.5 / oil) - 131.5)) / (
                                                                                               (
                                                                                                       10 ** 5) * pi * 14.69594)) * (
                                                                                             pi * 14.69594 - pbii * 14.69594))
                else:
                    rsii = ((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                            ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                     pi * 14.69594)) ** 1.39844) / 5.64334086
                    boii = 0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (
                            ((rsii * 5.64334086) ** 0.74239) * (gas ** 0.323294) * (
                            oil ** (-1.202040))) + 0.00000318099 * ((((rsii * 5.64334086) ** 0.74239) * (
                            gas ** 0.323294) * (oil ** (-1.202040))) ** 2)

            # если известно Pb
            else:
                pbii = pb
                if pi >= pb:
                    rsii = ((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                            ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                     pb * 14.69594)) ** 1.39844) / 5.64334086
                    boii = (0.497069 + 0.000862963 * ((((9 / 5) * tem) + 32) + 460) + 0.00182594 * (
                            ((rsii * 5.64334086) ** 0.74239) * (gas ** 0.323294) * (
                            oil ** (-1.202040))) + 0.00000318099 * ((((rsii * 5.64334086) ** 0.74239) * (
                            gas ** 0.323294) * (oil ** (-1.202040))) ** 2)) * np.exp(-((
                                                                                               -1433 + 5 * rsii * 5.64334086 + 17.2 * (
                                                                                               ((
                                                                                                        9 / 5) * tem) + 32) - 1180 * gas + 12.61 * (
                                                                                                       (
                                                                                                               141.5 / oil) - 131.5)) / (
                                                                                               (
                                                                                                       10 ** 5) * pi * 14.69594)) * (
                                                                                             pi * 14.69594 - pb * 14.69594))
                else:
                    rsii = ((185.843208 * (gas ** 1.87784) * (oil ** (-3.1437)) * (
                            ((((9 / 5) * tem) + 32) + 460) ** (-1.32657)) * (
                                     pi * 14.69594)) ** 1.39844) / 5.64334086
                    boii = 1 + 10 ** (-6.58511 + 2.91329 * np.log10(
                        rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (
                                ((9 / 5) * tem) + 32)) - 0.27683 * np.log10(
                        rsii * 5.64334086 * ((gas / oil) ** 0.526) + 0.968 * (((9 / 5) * tem) + 32)) ** 2)
        # PETROSKY-FARSHAD
        elif corPbRsBo == 3:
            # если известно Rs
            if rs > 0:
                pbii = (((112.727 * ((rs * 5.64334086) ** 0.577421)) / ((gas ** 0.8439) * (10 ** (
                        (7.916 * (10 ** (-4))) * (((141.5 / oil) - 131.5) ** 1.541) - (4.561 * (10 ** (-5))) * (
                        (((9 / 5) * tem) + 32) ** 1.3911))))) - 1391.051) / 14.69594
                if pi >= pbii:
                    rsii = rs
                    boii = (1.0113 + 7.2046 * (10 ** (-5)) * ((((rsii * 5.64334086) ** 0.3738) * (
                            (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * ((((
                                                                                      9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)) * np.exp(
                        -(1.705 * (10 ** (-7)) * ((rsii * 5.64334086) ** 0.69357) * (gas ** 1.885) * (
                                ((141.5 / oil) - 131.5) ** 0.3272) * ((((9 / 5) * tem) + 32) ** 0.6729) * (
                                  (pi * 14.69594) ** (-0.5906))) * (pi * 14.69594 - pbii * 14.69594))
                else:
                    rsii = (((((pi * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                            7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (
                            (((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086
                    boii = 1.0113 + 7.2046 * (10 ** (-5)) * ((((rsii * 5.64334086) ** 0.3738) * (
                            (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * (
                                                                      (((9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)

            # если известно Pb
            else:
                pbii = pb
                if pi >= pb:
                    rsii = (((((pb * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                            7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (
                            (((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086
                    boii = (1.0113 + 7.2046 * (10 ** (-5)) * ((((rsii * 5.64334086) ** 0.3738) * (
                            (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * ((((
                                                                                      9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)) * np.exp(
                        -(1.705 * (10 ** (-7)) * ((rsii * 5.64334086) ** 0.69357) * (gas ** 1.885) * (
                                ((141.5 / oil) - 131.5) ** 0.3272) * ((((9 / 5) * tem) + 32) ** 0.6729) * (
                                  (pi * 14.69594) ** (-0.5906))) * (pi * 14.69594 - pb * 14.69594))
                else:
                    rsii = (((((pi * 14.69594) / 112.727) + 12.34) * (gas ** 0.8439) * (10 ** (
                            7.916 * (10 ** (-4)) * ((((141.5 / oil) - 131.5)) ** 1.541) - 4.561 * (10 ** (-5)) * (
                            (((9 / 5) * tem) + 32) ** 1.3911)))) ** 1.73184) / 5.64334086
                    boii = 1.0113 + 7.2046 * (10 ** (-5)) * ((((rsii * 5.64334086) ** 0.3738) * (
                            (gas ** 0.2914) / (oil ** 0.6265)) + 0.24626 * (
                                                                      (((9 / 5) * tem) + 32) ** 0.5371)) ** 3.0936)

Tpc = 168 + 325 * gas - 12.5 * gas ** 2
Ppc = 667 + 15 * gas - 37.5 * gas ** 2
Tr = (((9 / 5) * tem) + 32 + 459.67) / Tpc
Pr = pi * 14.69594 / Ppc
z_list = [0.993152833, 0.986343632, 0.979573151, 0.972842134, 0.964923637,
              0.957719395, 0.950448373, 0.943108959, 0.935699561, 0.928218617,
              0.9206646, 0.91303603, 0.905331488, 0.897549625, 0.889689175,
              0.881748973, 0.873727965, 0.86562523, 0.857439996, 0.849171658,
              0.840819799, 0.832384213, 0.82257193, 0.813677698, 0.804648254,
              0.795477128, 0.786157401, 0.776681689, 0.767042117, 0.757230306,
              0.747237359, 0.737053875, 0.726669962, 0.716075279, 0.705259116,
              0.694210498, 0.682918347, 0.671371709, 0.659560049, 0.647473649,
              0.635104102, 0.622444946, 0.607064706, 0.593044526, 0.57851462,
              0.563433897, 0.547762327, 0.531465167, 0.514519781, 0.496925762,
              0.478718593, 0.459985815, 0.440882593, 0.417436434, 0.397019826,
              0.377225815, 0.358754681, 0.342343497, 0.328640025, 0.31798208,
              0.311723631, 0.303509085, 0.300918353, 0.298474981, 0.297081445,
              0.296467962, 0.296411737, 0.296493954, 0.29713173, 0.298134841,
              0.299674267, 0.301049334, 0.302556438, 0.304182522, 0.305929714,
              0.307803667, 0.309803364, 0.311916451, 0.314121008, 0.316391699,
              0.318706633, 0.321051576, 0.323420229, 0.325811618, 0.328226812,
              0.33032064, 0.332968561, 0.3355546, 0.338107795, 0.340651269,
              0.343057488, 0.345553288, 0.348177148, 0.35092687, 0.35351931,
              0.356109215, 0.358689362, 0.361253574, 0.363797309, 0.366697631,
              0.369354637, 0.372017706, 0.374686103, 0.377359188, 0.38003644,
              0.382717483, 0.385402087, 0.388090165, 0.39078175, 0.39347696,
              0.396175954, 0.398878889, 0.401585877, 0.404296945, 0.40701201,
              0.409730871, 0.412453207, 0.415178599, 0.417906552, 0.42063653,
              0.423367997, 0.426100446, 0.428833431, 0.431566583, 0.43429962,
              0.43703235, 0.439764655, 0.442496481, 0.445227818, 0.447958686,
              0.450689115, 0.453419138, 0.456148776, 0.458878044, 0.461606938,
              0.464169053, 0.466941391, 0.469703225, 0.472456277, 0.475202124,
              0.477942153, 0.480677546, 0.483409277, 0.486138125, 0.488864692,
              0.491589428, 0.494312661, 0.497034616, 0.499755443, 0.502475234,
              0.505057338, 0.507821804, 0.510571993, 0.513310826, 0.516040816,
              0.518764078, 0.521482346, 0.524196994, 0.526909064, 0.529508705,
              0.532310828, 0.535031426, 0.537673561, 0.540447832, 0.543151593,
              0.545853354, 0.548552595, 0.551248725, 0.553941105, 0.556629064,
              0.559311918, 0.56198899, 0.564659614, 0.567323159, 0.569979029,
              0.572824647]
p_list = np.arange(1, len(z_list) + 1)
Z = Z_Dranchuk_Abu_Kassem(Tr, Pr)
    # Объёмный коэффициент газа
bgii = 0.350958 * (Z * (tem + 273.15) / (pi * 100))
#print('bgii',bgii)
    # Расчёт плотности газа
pogi = (28.967 * gas * pi * 100) / (Z * 8.31 * (tem + 273.15))
#('pogi',pogi)
    # Расчёт вязкости газа
Mg = 28.967 * gas
Xg = 3.5 + (986 / (((9 / 5) * tem) + 32 + 459.67)) + 0.001 * Mg
Yg = 2.4 - 0.2 * Xg
Kg = ((9.4 + 0.02 * Mg) * (((9 / 5) * tem) + 32 + 459.67) ** 1.5) / (
            209 + 19 * Mg + (((9 / 5) * tem) + 32 + 459.67))
poggi = (1 / 62.428) * ((28.967 * gas * pi * 14.69594) / (Z * 10.732 * (((9 / 5) * tem) + 32 + 459.67)))
ugi = Kg * np.exp(Xg * (poggi ** Yg)) / 10000
    # Свойства воды
    # Расчёт объёмного коэф. Hewlett-Packard
A_1 = 0.9947 + 5.8 * (10 ** (-6)) * (((9 / 5) * tem) + 32) + 1.02 * (10 ** (-6)) * (((9 / 5) * tem) + 32) ** 2
A_2 = -4.228 * (10 ** (-6)) + 1.8376 * (10 ** (-8)) * (((9 / 5) * tem) + 32) - 6.77 * (10 ** (-11)) * (
            ((9 / 5) * tem) + 32) ** 2
A_3 = 1.3 * (10 ** (-10)) - 1.3855 * (10 ** (-12)) * (((9 / 5) * tem) + 32) + 4.285 * (10 ** (-15)) * (
            ((9 / 5) * tem) + 32) ** 2
bwii = A_1 + A_2 * pi * 14.69594 + A_3 * (pi * 14.69594) ** 2
    # Расчёт плотности McCain
Cwat = 25000 * (wat - 1) * 62.428
pwSC = ((Cwat / 25000) + 62.428) * 16.01846
pwRi = pwSC / bwii
    # Расчёт сжимаемости McCain
    # cwii = (1/(7.033*pi*14.69594+0.5415*Cwat-537*(((9/5)*tem)+32)+403300))/0.06805
    # cwii = 1.87143682589*10**(-9)*pi+4.281111590909080*10**(-5)
cwii = ((10 ** (-6)) * (3.51 + (-0.01 + 2 * (10 ** (-7)) * pi * 14.69594) * (((9 / 5) * tem) + 32) + (
            3.9267 * (10 ** (-5)) - 8 * (10 ** (-10)) * pi * 14.69594) * (((9 / 5) * tem) + 32) ** 2)) * 14.69594
print('сжимаемость воды',cwii)
    # Расчёт вязкости McCain
cww = Cwat / 1.0476 / 10000
cofA = 109.574 - 8.40564 * cww + 0.313314 * (cww ** 2) + 0.00872213 * (cww ** 3)
cofB = -1.12166 + 2.63951 * (10 ** (-2)) * cww - 6.79461 * (10 ** (-4)) * (cww ** 2) - 5.47119 * (10 ** (-5)) * (
            cww ** 3) + 1.55586 * (10 ** (-6)) * (cww ** 4)
uwi = cofA * (((9 / 5) * tem) + 32) ** cofB
uwwi = uwi * (0.9994 + 4.0295 * (10 ** (-5)) * pi * 14.69594 + 3.1062 * (10 ** (-9)) * ((pi * 14.69594) ** 2))

    # Расчёт начального объёма воды - для насыщенности
NGZwat = ((Swi * (oil * boii + gas * bgii)) / (1 - Swi)) / bwii






def calculations():
    df, data, P_calc, T, T_prev, Np, Wp, Gp, Winj, Ginj, T_index = data_read()
    for idx in range(len(data)):
        # p = NewP(Paq, Np[i], Rpit, wp[i], time, p, we, NGZoil, mfactor, (jw * 2.30592 / 0.98692), (Wei * 0.15899),
        # pi, cfactor, bgii, boii, pbii, rsii, Ginj[i], wi[i], sum(timed), tDsum[-1])

        def NewP(Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp, Rsi, Ginj, wi,
                 sumtime, tD1, n, Pnm2, C):
            # 'Secant method
            Pguess1 = Pnm1 * 0.999
            Pguess2 = Pnm1 * 0.998
            # print('Pguess1=', Pguess1, 'Panm1=', Panm1, 'Np=', Np, 'Rp=', Rp, 'Wp=', Wp, 'DeltaT=', DeltaT,
            # 'Pnm1=', Pnm1, 'Wenm1=', Wenm1, 'N=', N, 'm=', m, 'J=', J, 'Wei=', Wei, 'Pi=', Pi, 'Cfactor=',
            # Cfactor,'Bgi=', Bgi, 'Bti=', Bti, 'Pbp=', Pbp, 'Rsi=', Rsi, 'Ginj=', Ginj, 'wi=', wi, 'sumtime=', sumtime,'tD1=', tD1)

            Obj1 = ObjF(Pguess1, Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp, Rsi,
                        Ginj, wi, sumtime, tD1, 1, Pnm2, C)
            Obj2 = ObjF(Pguess2, Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp, Rsi,
                        Ginj, wi, sumtime, tD1, 2, Pnm2, C)
            # print('в Pguess3:', 'Pguess2', Pguess2,'Pguess1',Pguess1,'Obj1',Obj1,'Obj2',Obj2)
            RES = Obj2 * (Pguess2 - Pguess1) / (Obj2 - Obj1)
            print('RES', RES)
            delta=Obj2 - Obj1
            delta1=Obj2/ (Obj2 - Obj1)

            print('delta',delta,'delta1',delta1)
            if delta1>2 :
                print('смена')
                Pguess3 = Pguess2 - 1.9 * (Pguess2 - Pguess1)
                Obj3 = ObjF(Pguess3, Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp,
                            Rsi,
                            Ginj, wi, sumtime, tD1, 3, Pnm2, C)

                return Pguess3
            else:
                Pguess3 = Pguess2 - Obj2 * (Pguess2 - Pguess1) / (Obj2 - Obj1)
                Obj3 = ObjF(Pguess3, Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp,
                            Rsi,
                            Ginj, wi, sumtime, tD1, 3, Pnm2, C)

            # print('Pguess3',Pguess3)
            # print('Pguess3=', Pguess3, 'Panm1=', Panm1, 'Np=', Np, 'Rp=', Rp, 'Wp=', Wp, 'DeltaT=', DeltaT,
            #     'Pnm1=', Pnm1, 'Wenm1=', Wenm1, 'N=', N, 'm=', m, 'J=', J, 'Wei=', Wei, 'Pi=', Pi, 'Cfactor=',
            #    Cfactor, 'Bgi=', Bgi, 'Bti=', Bti, 'Pbp=', Pbp, 'Rsi=', Rsi, 'Ginj=', Ginj, 'wi=', wi, 'sumtime=',
            #   sumtime, 'tD1=', tD1)


            for i in range(1001):
                print(f"iteration {i}: Pguess1 = {Pguess1}, Pguess2 = {Pguess2}, Obj1 = {Obj1}, Obj2 = {Obj2}")
                if abs(Obj1) > abs(Obj2):
                    Pguess1 = Pguess3
                    Obj1 = Obj3
                else:
                    Pguess2 = Pguess3
                    Obj2 = Obj3
                if abs(Pguess1 - Pguess2) < 0.01:
                    break  # 'Convergence criteria of 0.01 psi
                # delta2 = Obj2 / (Obj2 - Obj1)
                # print('delta',delta2)
                # if delta2 > 2:
                #    Pguess3 = Pguess2 - 1.9 * (Pguess2 - Pguess1)
                #    print('смена2')
                # else:
                # print('Pguess2',Pguess2,'Pguess1',Pguess1)

                Pguess3 = Pguess2 - Obj2 * (Pguess2 - Pguess1) / (Obj2 - Obj1)
                Obj3 = ObjF(Pguess3, Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp,
                            Rsi, Ginj, wi, sumtime, tD1, 4, Pnm2, C)
                if i == 1000:
                    print("Convergence Problems!")  # "Convergence Problems!"

            NewP = Pguess3
            return NewP

        def ObjF(P, Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp, Rsi, Ginj, wi,
                 sumtime, tD1,n,Pnm2, C):
            #print('n=',n)
            #print('We вход', Wenm1)
            if Aquifer == 1:
                if Fetkovich  == 0:
                    if sumtime == 0:
                        We = 0

                    else:

                        # Перевод метры -> футы (если re в метрах)
                        re_ft = re * 3.28084

                        # Вычисление безразмерного времени
                        tD = 6.328e-3 * (kw * sumtime) / (m_poro * ct * auwwi * re_ft ** 2)
                        print('tD', tD)
                        # Вычисление безразмерного давления и его производной
                        if tD > 100:
                            pD = (np.log(tD) + 0.80907) / 2
                            pDproiz = 1 / (2 * tD)
                        else:
                            sqrt_tD = np.sqrt(tD)
                            tD_1_5 = tD ** 1.5
                            tD_2 = tD ** 2
                            tD_2_5 = tD ** 2.5

                            pD = (370.529 * sqrt_tD + 137.582 * tD + 5.69549 * tD_1_5) / (
                                    328.834 + 265.488 * sqrt_tD + 45.2157 * tD + tD_1_5)

                            pDproiz = (716.441 + 46.7984 * sqrt_tD + 270.038 * tD + 71.0098 * tD_1_5) / (
                                    1296.86 * sqrt_tD + 1204.73 * tD + 618.618 * tD_1_5 + 538.072 * tD_2 + 142.41 * tD_2_5)
                            print('pDproiz', pDproiz)
                        # Изменение давления (в psi)
                        delp = (pi - P) * 14.69594  # перевод давления из атм в psi, если требуется
                        print('delp',delp)
                        # Основная формула Картер-Трейси
                        delta_tD = tD - tD1
                        denominator = pD - tD1 * pDproiz

                        # Защита от деления на ноль
                        if abs(denominator) < 1e-6:
                            denominator = 1e-6

                        We = Wenm1 + (Bcoef * (delta_tD * delp - Wenm1 * pDproiz)) / denominator * 0.158

                        print(f'We по Картеру: {We:.3f}')
                elif Fetkovich == 8:
                    P_calc.append(float(P))
                    model = veh(re*3.28, hw*3.28, cf/14.69594, acvcw/14.69594, m_poro, kw, auwwi, rw, ugol)
                    last_index = len(P_calc) - 1  # последний шаг
                    #print('выходные', P, re * 3.28, hw * 3.28, cf/14.69594, acvcw/14.69594, m_poro, kw, auwwi, rw, P_calc)
                    pressures=np.array(P_calc) * 14.69594
                    #print('входные',T_index, pressures, last_index)
                    We = model.calculate_We_at_step(T_index, pressures, last_index)
                    i = last_index  # текущий шаг, для которого считается We
                    print(f"Дата текущего шага: {T_index[i].date()}")

                    #for j in range(i):
                    #    delta_days = (T_index[i] - T_index[j]).days
                    #    print(f"  шаг {j} → {T_index[j].date()} | ∆t = {delta_days} дней")
                    P_calc.pop()
                elif Fetkovich  == 7:
                    if sumtime == 0:
                        We = 0
                    else:
                        #Bcoef = 1.119 * m_poro * ct * ((re * 3.28084) ** 2) * hw * 3.28084 * (ugol / 360)
                        #print('Картер')
                        tD = 6.328 * (10 ** (-3)) * ((kw * sumtime) / (m_poro * ct * auwwi * ((re * 3.28084) ** 2)))
                        #print('kw=',kw,'sumtime=',sumtime,'ct=',ct,'auwwi=',auwwi,'ra=',ra )
                        print('tD=',tD)
                        # аппроксимация Эдвардсон (1962 г.)
                        Wed=(1.2838*tD**0.5+1.19328*tD+0.269872*tD**1.5+0.00855294*tD**2)/(1+0.616599*tD**0.5+0.0413008*tD)
                        #print('proizpD',pDproiz)
                        print('В del: Pi=',pi,'P=',P, 'Pnm1', Pnm1)
                        delp = (pi - P) * 14.69594
                        print('del',delp)
                        We=Wenm1+Bcoef*delp*Wed*0.158
                        #if n ==4:
                        #    we_obj.append(float(We))
                        print('We в Obj', We)

                elif Fetkovich == 5:
                    We = (ct * Wi * (pi-P) * 14.69594)
                    print('small pot We=', We)
                elif Fetkovich == 6:
                    print('pi=',pi,'Wenm1=',Wenm1,'C=',C,'Pnm2=',Pnm2,'Pnm1=',Pnm1,'P=',P,'DeltaT=',DeltaT)
                    We = Wenm1 + C * ((pi-Pnm1) + (pi-P))/2 * 14.69594 * DeltaT * 0.158
                    #We = Wenm1 + C * ((pi-Pnm1) + (pi-P))/2 * 14.69594 * DeltaT * 0.158

                    print('WE=',We)
                elif Fetkovich  == 1 or 2 or 3 or 4:

                    Pavg = (P + Pnm1) / 2
                    We = Wenm1 + (Wei / Pi * (Panm1 - Pavg) * (1 - np.exp(-J * Pi * DeltaT / Wei)))
                    # 'Make sure aquifer pressure at end of step can not be less than the reservoir pressure
                    Pan = Pi * (1 - We / Wei)
                    if Pan < P:
                        We = Wei * (1 - P / Pi)
                    print('We Obj=', We)
                    K1 = We / (pi - P)
                    print('отношение', K1)
            else:
                We = 0
            PVT = PVT_calc(P)
            #print(PVT)
            #print('N', N,'PVT[1]',PVT[1],'PVT[2]',PVT[2],'Rsi',Rsi,'PVT[0]',PVT[0],'Bti',Bti,'m',m,'Bgi',Bgi,'P',P,'Cfactor',Cfactor,'We',We,'Rp',Rp,'Rsi',Rsi,'Np',Np,'Wp',Wp,'PVT[3]',PVT[3],'Ginj',Ginj,'wi',wi)
            #slog1=N * ((PVT[1] + PVT[2] * (Rsi - PVT[0])) - Bti)
            #print('slog1',slog1)
            #slog2=N * m * Bti * (PVT[2] - Bgi) / Bgi
            #print('slog2', slog2)
            #slog3=(1 + m) * N * Bti * (Pi - P) * Cfactor
            #print('slog3',slog3)
            #print('We',We)
            #slog4=Np * ((PVT[1] + PVT[2] * (Rsi - PVT[0])) + (Rp - Rsi) * PVT[2])
            #print('slog4',slog4)
            #slog5=Wp * PVT[3]
            #print('slog5',slog5)
            #slog6=Ginj * PVT[2]
            #print('slog6',slog6)
            #slog7=wi * PVT[3]
            #print('slog7',slog7)
            #ObjF2=slog1+slog2+slog3+We-slog4-slog5+slog6+slog7
            #print('ObjF2',ObjF2)
            print('We в Obj', We)
            ObjF = N * ((PVT[1] + PVT[2] * (Rsi - PVT[0])) - Bti) + N * m * Bti * (PVT[2] - Bgi) / Bgi + (
                    1 + m) * N * Bti * (Pi - P) * Cfactor + We - Np * ((PVT[1] + PVT[2] * (Rsi - PVT[0])) + (Rp - Rsi) * PVT[2]) - Wp * PVT[3] + Ginj * PVT[2] + wi * PVT[3]
            ObjF1 = N * ((PVT[1] + PVT[2] * (Rsi - PVT[0])) - Bti) + N * m * Bti * (PVT[2] - Bgi) / Bgi + (
                    1 + m) * N * Bti * (Pi - P) * Cfactor - Np * ((PVT[1] + PVT[2] * (Rsi - PVT[0])) + (Rp - Rsi) * PVT[2]) - Wp * PVT[3] + Ginj * PVT[2] + wi * PVT[3]
            print('ObjF=',ObjF)
            print('ObjF1=', ObjF1)
            if n == 1:
                we_obj1.append(We)
            elif n == 2:
                we_obj2.append(We)
            elif n == 3:
                we_obj3.append(We)
            return ObjF

        def We(P, Panm1, DeltaT, Pnm1, Wenm1, Pi, J, Wei):
            if Wei == 0 or J == 0:
                We = 0
            else:
                Pavg = (P + Pnm1) / 2
                We = Wenm1 + (Wei / Pi * (Panm1 - Pavg) * (1 - np.exp(-J * Pi * DeltaT / Wei)))
                # 'Make sure aquifer pressure at end of step can not be less than the reservoir pressure
                Pan = Pi * (1 - We / Wei)
                if Pan < P:
                    We = Wei * (1 - P / Pi)
            return We

        def We_Schilthuis(P, DeltaT, Pnm1, Wenm1, Pnm2):
            print('в штилуса', P, DeltaT, Pnm1, Wenm1, Pnm2)
            We = Wenm1 + c * ((pi-Pnm1)+(pi-P))/2 * 14.69594  * DeltaT * 0.158
            return We

        def We_Carter_Tracy(p, sumtime, Wenm1, tD1, Panm1):

            # Перевод метры -> футы (если re в метрах)
            re_ft = re * 3.28084

            # Вычисление безразмерного времени
            tD = 6.328e-3 * (kw * sumtime) / (m_poro * ct * auwwi * re_ft ** 2)

            # Вычисление безразмерного давления и его производной
            if tD > 100:
                pD = (np.log(tD) + 0.80907) / 2
                pDproiz = 1 / (2 * tD)
            else:
                sqrt_tD = np.sqrt(tD)
                tD_1_5 = tD ** 1.5
                tD_2 = tD ** 2
                tD_2_5 = tD ** 2.5

                pD = (370.529 * sqrt_tD + 137.582 * tD + 5.69549 * tD_1_5) / (
                        328.834 + 265.488 * sqrt_tD + 45.2157 * tD + tD_1_5)

                pDproiz = (716.441 + 46.7984 * sqrt_tD + 270.038 * tD + 71.0098 * tD_1_5) / (
                        1296.86 * sqrt_tD + 1204.73 * tD + 618.618 * tD_1_5 + 538.072 * tD_2 + 142.41 * tD_2_5)

            # Изменение давления (в psi)
            delp = (pi - p) * 14.69594  # перевод давления из атм в psi, если требуется

            # Основная формула Картер-Трейси
            delta_tD = tD - tD1
            denominator = pD - tD1 * pDproiz

            # Защита от деления на ноль
            if abs(denominator) < 1e-6:
                denominator = 1e-6

            we = Wenm1 + (Bcoef * (delta_tD * delp - Wenm1 * pDproiz)) / denominator * 0.158

            print(f'We по Картеру: {we:.3f}')
            return we
        def We1_Carter_Tracy(p, sumtime, Wenm1, tD1, Panm1):
            #print('Входные параметры', p, sumtime, Wenm1, tD1)
            #tD = 0.00036 * ((kw * sumtime) / (m_poro * ct * auwwi * ((re * 3.28084) ** 2)))
            tD = 6.328 * (10 ** (-3)) * ((kw * sumtime) / (m_poro * ct * auwwi * ((re * 3.28084) ** 2)))
            #time_hours = DeltaT * 24
            #t_DR_factor = (0.0002637 * kw) / (m_poro * auwwi * ct * (re * 3.28) ** 2)
            #tD = t_DR_factor * time_hours
            if tD > 100:
                pD = (np.log(tD) + 0.80907) / 2
                pDproiz = 1 / (2 * tD)
            else:
            # аппроксимация Эдвардсон (1962 г.)
                #pD = 0.63656 + 0.161 * tD + 0.158 * np.log(tD) - 0.091 * np.log(tD) ** 2
                pD = (370.529 * np.sqrt(tD) + 137.582 * tD + 5.69549 * (tD) ** 1.5) / (
                     328.834 + 265.488 * np.sqrt(tD) + 45.2157 * tD + (tD) ** 1.5)
            # производная pD
                #pDproiz = 0.161 + (0.158 - 2 * 0.091 * np.log(tD)) / tD
                pDproiz = (716.441 + 46.7984 * (tD ** 0.5) + 270.038 * tD + 71.0098 * (tD ** 1.5)) / (
                    1296.86 * (tD ** 0.5) + 1204.73 * tD + 618.618 * (tD ** 1.5) + 538.072 * (tD ** 2) + 142.41 * (
                       tD ** 2.5))
            delp = (pi - p) * 14.69594
            #we = Wenm1 + ((tD - tD1) *  ((Bcoef * delp - Wenm1 * pDproiz) / (pD - tD1 * pDproiz))) * 0.15899
            we = Wenm1 + Bcoef*(delp*(tD - tD1)-Wenm1*pDproiz)
            tDsum.append(tD)
            print('We по Картеру', we)
            return we

        def We_Hurst(P, sumtime, Wenm1):
            tD = 6.328 * (10 ** (-3)) * ((kw * sumtime) / (m_poro * ct * auwwi * ((re * 3.28084) ** 2)))
            # print('kw=',kw,'sumtime=',sumtime,'ct=',ct,'auwwi=',auwwi,'ra=',ra )
            print('tD=', tD)
            # аппроксимация Эдвардсон (1962 г.)
            Wed = (1.2838 * tD ** 0.5 + 1.19328 * tD + 0.269872 * tD ** 1.5 + 0.00855294 * tD ** 2) / (
                        1 + 0.616599 * tD ** 0.5 + 0.0413008 * tD)

            # print('proizpD',pDproiz)
            print('В del: Pi=', pi, 'P=', P)
            delp = (pi - p) * 14.69594
            print('del', delp)
            We=Wenm1+Bcoef*delp*Wed*0.158
            return We

        if idx == 0:  # Расчёт давления 1 шага при начальных PVT
            n = 0
            p = pi
            we = 0
            Paq = pi
            tD = 0
            # насыщенности
            S_w = Swi
            S_g = (gas * bgii) / (NGZwat * bwii + gas * bgii + oil * boii)
            S_o = 1 - S_w - S_g
            Pnm2 = 0

        else:  # расчёт последующих шагов
            print('итерация', idx)
            Tnew = pd.to_datetime(T[idx])
            DeltaT = (Tnew - T_prev).days
            timed.append(DeltaT)
            T_prev = Tnew
            mfactor = (G * bgii) / (N * boii)
            Rpit = (Gp[idx-1]) / (Np[idx-1])
            n=n+1

            #print('Rpit=', Rpit, 'Gp[idx-1]=', Gp[idx-1] , 'Np[idx-1]=', Np[idx-1])
            PVT = PVT_calc(p)
            cfactor = (Swi * (PVT[4]) + (cf)) / (1 - Swi)
            #print('Paq=', Paq, 'Np=', Np[idx], 'Rpit=', Rpit, 'Wp[idx]=', Wp[idx], 'DeltaT=', DeltaT,'p=', p, 'we=', we, 'oil=', oil, 'mfactor=', mfactor, 'jw=', jw, 'Wei=', Wei, 'pi=', pi,'cfactor=', cfactor, 'bgii=', bgii, 'boii=', boii, 'pbii=', pbii, 'rsii=', rsii,'Ginj[idx]=', Ginj[idx], 'Winj[idx]=', Winj[idx])
            print('We в P', we)
            we_res.append(we)
            print('sumtime',sum(timed))
            p = NewP(Paq, Np[idx-1], Rpit, Wp[idx-1], DeltaT, p, we, N, mfactor, (jw * 2.30592 / 0.98692), (Wei * 0.15899),
                     pi, cfactor, bgii, boii, pbii, rsii, Ginj[idx-1], Winj[idx-1], sum(timed), tDsum[-1],n, Pnm2, c)
            print('p=',p)

            #if p>P_calc[-1]:
            #    print('замена')
            #    print(p,P_calc[-1])
            #    p=min(p,P_calc[-1]+0.0001)
            # def NewP(Panm1, Np, Rp, Wp, DeltaT, Pnm1, Wenm1, N, m, J, Wei, Pi, Cfactor, Bgi, Bti, Pbp, Rsi, Ginj, wi,
            # sumtime, tD1):
            # Расчёт аквифера
            #We_test = We(175.951247, Paq, DeltaT, P_calc[-1], we, pi, (jw * 2.30592 / 0.98692), (Wei * 0.15899))
            #print('Test',We_test)
            if Aquifer == 1:
                # Расчёт притока воды из аквифера - Картер-Трейси
                if Fetkovich == 0:
                    #timed.append(time)
                    print('sum',sum(timed))
                    we = We_Carter_Tracy(p, sum(timed), we, tDsum[-1],P_calc[-1])

                #def We(P, Panm1, DeltaT, Pnm1, Wenm1, Pi, J, Wei):
                # tDsum.append(tD)
                # Расчёт притока воды из аквифера - Феткович

                elif Fetkovich == 5:
                    we = (ct * Wi * (pi - p) * 14.69594) * (ugol / 360)

                elif Fetkovich == 6:
                    we = We_Schilthuis(p, DeltaT, P_calc[-1], we, Pnm2)

                elif Fetkovich == 7:
                    we = We_Hurst(p, sum(timed), we)

                elif Fetkovich == 8:
                    P_calc.append(float(p))
                    model = veh(re*3.28, hw*3.28, cf/14.69594, acvcw/14.69594, m_poro, kw, auwwi, rw, ugol)
                    last_index = len(P_calc) - 1  # последний шаг
                    pressures = np.array(P_calc) * 14.69594
                    we = model.calculate_We_at_step(T_index, pressures, last_index)
                    P_calc.pop()
                    #Pnm2 = Pnm2 + (P_calc[-1] - p) * DeltaT/2
                elif Fetkovich == 1 or 2 or 3 or 4:
                    we = We(p, Paq, DeltaT, P_calc[-1], we, pi, (jw * 2.30592 / 0.98692), (Wei * 0.15899))
                    if Wei == 0:
                        Paq = pi
                    else:
                        Paq = pi * (1 - (we / (Wei * 0.15899)))
            # насыщенности
            #def We_Schilthuis(P, DeltaT, Pnm1, Wenm1, C):
            #Nm = (NGZoil - Np[i]) * PVT[1]
            #Gm = (NGZgas - (Gp[i] - Np[i] * PVT[0]) + NGZoil * rsii - (NGZoil - Np[i]) * PVT[0] - Np[i] * PVT[0] + Ginj[
                #i]) * PVT[2]
            #Wm = (NGZwat - wp[idx] + wi[idx] + we) * PVT[3]

            #S_w = Wm / (Wm + Gm + Nm)
            #S_g = Gm / (Wm + Gm + Nm)
            #S_o = 1 - S_w - S_g
            #pit= 175.84105105677295
            #PBII= 68.32330856748044
            #We в P 1159.0694996250227

        print(p)
        P_calc.append(float(p))
    np.set_printoptions(threshold=np.inf)
    print(*P_calc, sep="\n")
    #print(*we_obj, sep="\n")
    print(*we_obj1, sep="\n")
    print(*we_obj2, sep="\n")
    print(*we_obj3, sep="\n")
    print(*we_res, sep="\n")
Result = calculations()
